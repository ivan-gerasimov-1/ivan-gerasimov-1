---
import Icon from "#app/components/icon/icon.astro";

import { createI18nLink } from "#app/i18n/i18nLink.ts";
import { navigationBarI18nDictionary } from "#app/i18n/navigationBar/dictionary.ts";
import { createBoundTranslate } from "#app/i18n/translate.ts";
import type { TLocale } from "#app/i18n/types.ts";

import { content } from "#app/i18n/navigationBar/content.ts";

type Props = {
	active: string;
};

let locale = (Astro.currentLocale ?? "en") as TLocale;
let { active } = Astro.props;

let t = createBoundTranslate(locale, navigationBarI18nDictionary);
---

<nav class="nav">
	<div class="selector"></div>
	{
		content.links.map((link) => {
			return (
				<a
					class:list={[
						"navLink",
						{
							active: active === link.id,
							disabled: link.isDisabled,
						},
					]}
					href={createI18nLink(link.url, locale)}
				>
					{link.type === "icon" && (
						<Icon name={link.icon} width="20px" height="20px" />
					)}

					{link.type === "text" && (
						<span
							class="navItemLabel"
							data-disabled-label={link.isDisabled ? t("Soon") : undefined}
						>
							{t(link.label)}
						</span>
					)}
				</a>
			);
		})
	}
</nav>

<script>
	function setSelector(root: HTMLElement, target: HTMLElement) {
		requestAnimationFrame(() => {
			root.style.setProperty("--selector-start", target.offsetLeft + "px");
			root.style.setProperty("--selector-width", target.offsetWidth + "px");

			requestAnimationFrame(() => {
				root.style.setProperty(
					"--selector-transition-property",
					"width, transform, opacity",
				);

				root.style.setProperty("--selector-scale", "1");
				root.style.setProperty("--selector-opacity", "1");
			});
		});
	}

	function resetSelector(
		root: HTMLElement,
		currentTarget: HTMLElement,
		relatedTarget: HTMLElement,
	) {
		if (relatedTarget && relatedTarget.tagName === currentTarget.tagName) {
			return;
		}

		requestAnimationFrame(() => {
			root.style.setProperty("--selector-opacity", "0");
			root.style.setProperty("--selector-scale", "0.875");

			setTimeout(() => {
				root.style.setProperty("--selector-transition-property", "opacity");
			}, 250);
		});
	}

	let nav: HTMLElement | null = document.querySelector(".nav");
	let navLinks: NodeListOf<HTMLElement> | null =
		document.querySelectorAll(".navLink");

	if (nav && navLinks.length > 0) {
		for (let navLink of navLinks) {
			navLink.addEventListener("mouseenter", (event) => {
				let target = event.target as HTMLElement;

				setSelector(nav, target);
			});

			navLink.addEventListener("mouseleave", (event) => {
				let currentTarget = event.currentTarget as HTMLElement;
				let relatedTarget = event.relatedTarget as HTMLElement;

				resetSelector(nav, currentTarget, relatedTarget);
			});
		}
	}
</script>

<style>
	.nav {
		--spacing-m: 0.375rem;
		--spacing-l: 1rem;
		--spacing-xl: 1.375rem;

		--fs-xs: 0.5rem;
		--fs-m: 0.75rem;

		--c-white_7-5: oklch(from var(--white) l c h / 7.5%);
		--c-white_5: oklch(from var(--white) l c h / 5%);
		--c-white_2-5: oklch(from var(--white) l c h / 2.5%);

		--color-font-100_50: oklch(from var(--color-font-100) l c h / 50%);
		--color-font-100_25: oklch(from var(--color-font-100) l c h / 25%);

		--c-border: var(--c-white_5);
		--c-background: var(--c-white_2-5);

		--br-inner: 0.5rem;
		--br-outer: calc(var(--br-inner) + var(--spacing-m));

		--border-100: 1px solid var(--c-border);

		--transition-100: 0.15s ease-in-out;

		--selector-start: var(--spacing-m);
		--selector-width: 2rem;
		--selector-opacity: 0;
		--selector-transition-property: opacity;
		--selector-scale: 0.875;

		position: relative;

		display: flex;

		padding: var(--spacing-m);

		font-family: var(--ff-monospace);
		font-size: var(--fs-m);

		border-radius: var(--br-outer);
		border-top-left-radius: 0;
		border-top-right-radius: 0;

		border: var(--border-100);
		border-top: none;

		background-color: var(--c-background);

		backdrop-filter: blur(100px);

		overflow: hidden;
	}

	.navLink {
		display: flex;
		align-items: center;
		justify-content: center;

		position: relative;

		padding: var(--spacing-m) var(--spacing-xl);

		border-radius: var(--br-inner);

		text-decoration: none;
		color: inherit;
		cursor: default;

		@media (max-width: 48rem) {
			& {
				padding-inline: var(--spacing-l);
			}
		}

		&.active {
			&::after {
				position: absolute;

				content: "";

				top: calc(12.5% + 12.5px);
				left: calc(50% - 12.5px);

				width: 25px;
				height: 25px;

				border-radius: 100%;

				background-color: oklch(from var(--white) l c h / 50%);

				filter: blur(12px);

				z-index: -1;
			}
		}

		&.disabled {
			pointer-events: none;

			color: var(--color-font-100_50);
		}
	}

	.navItemLabel {
		position: relative;

		&::before {
			position: absolute;

			top: -0.5rem;
			right: -0.5rem;

			content: attr(data-disabled-label);

			font-size: var(--fs-xs);

			color: var(--color-font-100_25);
		}
	}

	.selector {
		position: absolute;

		top: var(--spacing-m);
		bottom: var(--spacing-m);
		left: 0;

		width: var(--selector-width);

		opacity: var(--selector-opacity);

		background-color: var(--c-white_7-5);

		border-radius: var(--br-inner);

		transition: none 0.25s cubic-bezier(0.4, 1.3, 0.9, 1);
		transition-property: var(--selector-transition-property);

		transform: translateX(var(--selector-start)) scale(var(--selector-scale));

		pointer-events: none;

		will-change: transform, opacity, width;
	}
</style>
